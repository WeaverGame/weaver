import os, string, sys

Import('env')

xrealradiant_src = [
'code/xrealradiant/radiant/main.cpp',
'code/xrealradiant/radiant/RadiantModule.cpp',
'code/xrealradiant/radiant/brushmanip.cpp',
'code/xrealradiant/radiant/brush/Winding.cpp',
'code/xrealradiant/radiant/brush/export/CollisionModel.cpp',
'code/xrealradiant/radiant/brush/FaceTexDef.cpp',
'code/xrealradiant/radiant/brush/BrushModule.cpp',
'code/xrealradiant/radiant/brush/FixedWinding.cpp',
'code/xrealradiant/radiant/brush/BrushNode.cpp',
'code/xrealradiant/radiant/brush/FaceInstance.cpp',
'code/xrealradiant/radiant/brush/Brush.cpp',
'code/xrealradiant/radiant/brush/TextureProjection.cpp',
'code/xrealradiant/radiant/brush/Face.cpp',
'code/xrealradiant/radiant/brush/TexDef.cpp',
'code/xrealradiant/radiant/brush/BrushPrimitTexDef.cpp',
'code/xrealradiant/radiant/brush/FaceShader.cpp',
'code/xrealradiant/radiant/brush/csg/BrushByPlaneClipper.cpp',
'code/xrealradiant/radiant/brush/csg/CSG.cpp',
'code/xrealradiant/radiant/brush/BrushTokenExporter.cpp',
'code/xrealradiant/radiant/brush/FacePlane.cpp',
'code/xrealradiant/radiant/brush/BrushTokenImporter.cpp',
'code/xrealradiant/radiant/camera/Camera.cpp',
'code/xrealradiant/radiant/camera/FloatingCamWnd.cpp',
'code/xrealradiant/radiant/camera/GlobalCamera.cpp',
'code/xrealradiant/radiant/camera/CameraSettings.cpp',
'code/xrealradiant/radiant/camera/CamWnd.cpp',
'code/xrealradiant/radiant/namespace/Namespace.cpp',
'code/xrealradiant/radiant/namespace/NamespaceFactory.cpp',
'code/xrealradiant/radiant/render/backend/glprogram/ARBBumpProgram.cpp',
'code/xrealradiant/radiant/render/backend/glprogram/ARBDepthFillProgram.cpp',
'code/xrealradiant/radiant/render/backend/OpenGLShader.cpp',
'code/xrealradiant/radiant/render/backend/GLProgramFactory.cpp',
'code/xrealradiant/radiant/render/backend/OpenGLShaderPass.cpp',
'code/xrealradiant/radiant/render/OpenGLModule.cpp',
'code/xrealradiant/radiant/render/OpenGLRenderSystem.cpp',
'code/xrealradiant/radiant/render/debug/SpacePartitionRenderer.cpp',
'code/xrealradiant/radiant/ui/entitychooser/EntityClassChooser.cpp',
'code/xrealradiant/radiant/ui/entitychooser/EntityClassTreePopulator.cpp',
'code/xrealradiant/radiant/ui/filterdialog/FilterDialog.cpp',
'code/xrealradiant/radiant/ui/filterdialog/FilterEditor.cpp',
'code/xrealradiant/radiant/ui/texturebrowser/TextureBrowser.cpp',
'code/xrealradiant/radiant/ui/findshader/FindShader.cpp',
'code/xrealradiant/radiant/ui/mainframe/EmbeddedLayout.cpp',
'code/xrealradiant/radiant/ui/mainframe/FloatingLayout.cpp',
'code/xrealradiant/radiant/ui/mainframe/MainFrame.cpp',
'code/xrealradiant/radiant/ui/mainframe/MainFrameLayoutManager.cpp',
'code/xrealradiant/radiant/ui/mainframe/RegularLayout.cpp',
'code/xrealradiant/radiant/ui/mainframe/ScreenUpdateBlocker.cpp',
'code/xrealradiant/radiant/ui/mainframe/SplitPaneLayout.cpp',
'code/xrealradiant/radiant/ui/mapinfo/MapInfoDialog.cpp',
'code/xrealradiant/radiant/ui/mapinfo/EntityInfoTab.cpp',
'code/xrealradiant/radiant/ui/mapinfo/ShaderInfoTab.cpp',
'code/xrealradiant/radiant/ui/mapinfo/ModelInfoTab.cpp',
'code/xrealradiant/radiant/ui/mediabrowser/MediaBrowser.cpp',
'code/xrealradiant/radiant/ui/particles/ParticlesChooser.cpp',
'code/xrealradiant/radiant/ui/overlay/OverlayDialog.cpp',
'code/xrealradiant/radiant/ui/overlay/Overlay.cpp',
'code/xrealradiant/radiant/ui/splash/Splash.cpp',
'code/xrealradiant/radiant/ui/mru/MRUMenuItem.cpp',
'code/xrealradiant/radiant/ui/mru/MRU.cpp',
'code/xrealradiant/radiant/ui/layers/LayerControl.cpp',
'code/xrealradiant/radiant/ui/layers/LayerContextMenu.cpp',
'code/xrealradiant/radiant/ui/layers/LayerControlDialog.cpp',
'code/xrealradiant/radiant/ui/ortho/OrthoContextMenu.cpp',
'code/xrealradiant/radiant/ui/about/AboutDialog.cpp',
'code/xrealradiant/radiant/ui/brush/QuerySidesDialog.cpp',
'code/xrealradiant/radiant/ui/einspector/TexturePropertyEditor.cpp',
'code/xrealradiant/radiant/ui/einspector/EntityInspector.cpp',
'code/xrealradiant/radiant/ui/einspector/SkinChooser.cpp',
'code/xrealradiant/radiant/ui/einspector/ColourPropertyEditor.cpp',
'code/xrealradiant/radiant/ui/einspector/EntityPropertyEditor.cpp',
'code/xrealradiant/radiant/ui/einspector/SkinPropertyEditor.cpp',
'code/xrealradiant/radiant/ui/einspector/Vector3PropertyEditor.cpp',
'code/xrealradiant/radiant/ui/einspector/ComboBoxPropertyEditor.cpp',
'code/xrealradiant/radiant/ui/einspector/AddPropertyDialog.cpp',
'code/xrealradiant/radiant/ui/einspector/FloatPropertyEditor.cpp',
'code/xrealradiant/radiant/ui/einspector/BooleanPropertyEditor.cpp',
'code/xrealradiant/radiant/ui/einspector/LightTextureChooser.cpp',
'code/xrealradiant/radiant/ui/einspector/SoundPropertyEditor.cpp',
'code/xrealradiant/radiant/ui/einspector/PropertyEditorFactory.cpp',
'code/xrealradiant/radiant/ui/einspector/ClassnamePropertyEditor.cpp',
'code/xrealradiant/radiant/ui/einspector/ModelPropertyEditor.cpp',
'code/xrealradiant/radiant/ui/einspector/AnglePropertyEditor.cpp',
'code/xrealradiant/radiant/ui/einspector/PropertyEditor.cpp',
'code/xrealradiant/radiant/ui/common/CommandEntry.cpp',
'code/xrealradiant/radiant/ui/common/EntityChooser.cpp',
'code/xrealradiant/radiant/ui/common/MapPreview.cpp',
'code/xrealradiant/radiant/ui/common/ModelPreview.cpp',
'code/xrealradiant/radiant/ui/common/TexturePreviewCombo.cpp',
'code/xrealradiant/radiant/ui/common/ShaderSelector.cpp',
'code/xrealradiant/radiant/ui/common/ShaderChooser.cpp',
'code/xrealradiant/radiant/ui/common/SoundChooser.cpp',
'code/xrealradiant/radiant/ui/common/SoundShaderPreview.cpp',
'code/xrealradiant/radiant/ui/common/RenderableAABB.cpp',
'code/xrealradiant/radiant/ui/common/ShaderDefinitionView.cpp',
'code/xrealradiant/radiant/ui/menu/FiltersMenu.cpp',
'code/xrealradiant/radiant/ui/prefdialog/PrefPage.cpp',
'code/xrealradiant/radiant/ui/prefdialog/PrefDialog.cpp',
'code/xrealradiant/radiant/ui/transform/TransformDialog.cpp',
'code/xrealradiant/radiant/ui/modelselector/ModelSelector.cpp',
'code/xrealradiant/radiant/ui/surfaceinspector/SurfaceInspector.cpp',
'code/xrealradiant/radiant/ui/patch/CapDialog.cpp',
'code/xrealradiant/radiant/ui/patch/PatchThickenDialog.cpp',
'code/xrealradiant/radiant/ui/patch/PatchInspector.cpp',
'code/xrealradiant/radiant/ui/patch/PatchCreateDialog.cpp',
'code/xrealradiant/radiant/ui/patch/BulgePatchDialog.cpp',
'code/xrealradiant/radiant/ui/lightinspector/LightInspector.cpp',
'code/xrealradiant/radiant/ui/commandlist/CommandList.cpp',
'code/xrealradiant/radiant/ui/commandlist/ShortcutChooser.cpp',
'code/xrealradiant/radiant/patchmanip.cpp',
'code/xrealradiant/radiant/xyview/XYWnd.cpp',
'code/xrealradiant/radiant/xyview/GlobalXYWnd.cpp',
'code/xrealradiant/radiant/textool/TexToolItem.cpp',
'code/xrealradiant/radiant/textool/item/BrushItem.cpp',
'code/xrealradiant/radiant/textool/item/FaceItem.cpp',
'code/xrealradiant/radiant/textool/item/PatchItem.cpp',
'code/xrealradiant/radiant/textool/item/PatchVertexItem.cpp',
'code/xrealradiant/radiant/textool/item/FaceVertexItem.cpp',
'code/xrealradiant/radiant/textool/TexTool.cpp',
'code/xrealradiant/radiant/layers/LayerCommandTarget.cpp',
'code/xrealradiant/radiant/layers/LayerSystem.cpp',
'code/xrealradiant/radiant/view.cpp',
'code/xrealradiant/radiant/modulesystem/DynamicLibrary.cpp',
'code/xrealradiant/radiant/modulesystem/ApplicationContextImpl.cpp',
'code/xrealradiant/radiant/modulesystem/DynamicLibraryLoader.cpp',
'code/xrealradiant/radiant/modulesystem/ModuleLoader.cpp',
'code/xrealradiant/radiant/modulesystem/ModuleRegistry.cpp',
'code/xrealradiant/radiant/select.cpp',
'code/xrealradiant/radiant/selection/SelectedNodeList.cpp',
'code/xrealradiant/radiant/selection/shaderclipboard/ShaderClipboard.cpp',
'code/xrealradiant/radiant/selection/shaderclipboard/Texturable.cpp',
'code/xrealradiant/radiant/selection/SelectionTest.cpp',
'code/xrealradiant/radiant/selection/ManipulateObserver.cpp',
'code/xrealradiant/radiant/selection/TransformationVisitors.cpp',
'code/xrealradiant/radiant/selection/algorithm/Transformation.cpp',
'code/xrealradiant/radiant/selection/algorithm/GroupCycle.cpp',
'code/xrealradiant/radiant/selection/algorithm/Curves.cpp',
'code/xrealradiant/radiant/selection/algorithm/Entity.cpp',
'code/xrealradiant/radiant/selection/algorithm/Shader.cpp',
'code/xrealradiant/radiant/selection/algorithm/Primitives.cpp',
'code/xrealradiant/radiant/selection/algorithm/Group.cpp',
'code/xrealradiant/radiant/selection/algorithm/ModelFinder.cpp',
'code/xrealradiant/radiant/selection/algorithm/General.cpp',
'code/xrealradiant/radiant/selection/BestPoint.cpp',
'code/xrealradiant/radiant/selection/Planes.cpp',
'code/xrealradiant/radiant/selection/RadiantWindowObserver.cpp',
'code/xrealradiant/radiant/selection/RadiantSelectionSystem.cpp',
'code/xrealradiant/radiant/selection/Manipulatables.cpp',
'code/xrealradiant/radiant/selection/SelectObserver.cpp',
'code/xrealradiant/radiant/selection/Intersection.cpp',
'code/xrealradiant/radiant/selection/Manipulators.cpp',
'code/xrealradiant/radiant/settings/GameFileLoader.cpp',
'code/xrealradiant/radiant/settings/Game.cpp',
'code/xrealradiant/radiant/settings/GameManager.cpp',
'code/xrealradiant/radiant/settings/PreferenceSystem.cpp',
'code/xrealradiant/radiant/settings/Win32Registry.cpp',
'code/xrealradiant/radiant/patch/Patch.cpp',
'code/xrealradiant/radiant/patch/PatchNode.cpp',
'code/xrealradiant/radiant/patch/PatchModule.cpp',
'code/xrealradiant/radiant/patch/PatchBezier.cpp',
'code/xrealradiant/radiant/patch/PatchRenderables.cpp',
'code/xrealradiant/radiant/map/RootNode.cpp',
'code/xrealradiant/radiant/map/MapPosition.cpp',
'code/xrealradiant/radiant/map/FindMapElements.cpp',
'code/xrealradiant/radiant/map/MapFileManager.cpp',
'code/xrealradiant/radiant/map/algorithm/Traverse.cpp',
'code/xrealradiant/radiant/map/CounterManager.cpp',
'code/xrealradiant/radiant/map/RegionManager.cpp',
'code/xrealradiant/radiant/map/PointFile.cpp',
'code/xrealradiant/radiant/map/MapPositionManager.cpp',
'code/xrealradiant/radiant/map/MapResource.cpp',
'code/xrealradiant/radiant/map/Map.cpp',
'code/xrealradiant/radiant/map/AutoSaver.cpp',
'code/xrealradiant/radiant/map/MapResourceManager.cpp',
'code/xrealradiant/radiant/map/MapFileChooserPreview.cpp',
'code/xrealradiant/radiant/map/StartupMapLoader.cpp',
'code/xrealradiant/radiant/entity.cpp',
'code/xrealradiant/radiant/clipper/ClipPoint.cpp',
'code/xrealradiant/radiant/clipper/Clipper.cpp',
'code/xrealradiant/radiant/timer.cpp',
'code/xrealradiant/radiant/mainframe_old.cpp',
'code/xrealradiant/radiant/log/Console.cpp',
'code/xrealradiant/radiant/log/LogStream.cpp',
'code/xrealradiant/radiant/log/LogWriter.cpp',
'code/xrealradiant/radiant/log/COutRedirector.cpp',
'code/xrealradiant/radiant/log/StringLogDevice.cpp',
'code/xrealradiant/radiant/log/LogStreamBuf.cpp',
'code/xrealradiant/radiant/log/LogFile.cpp',
'code/xrealradiant/radiant/referencecache/ModelCache.cpp',
'code/xrealradiant/radiant/referencecache/NullModel.cpp',
'code/xrealradiant/radiant/referencecache/NullModelNode.cpp'
]

scenegraphutil_src = [
'code/xrealradiant/libs/scene/InstanceWalkers.cpp',
'code/xrealradiant/libs/scene/TraversableNodeSet.cpp',
'code/xrealradiant/libs/scene/Node.cpp',
]

gtkutil_src = [
'code/xrealradiant/libs/gtkutil/GLWidget.cpp',
'code/xrealradiant/libs/gtkutil/PanedPosition.cpp',
'code/xrealradiant/libs/gtkutil/VFSTreePopulator.cpp',
'code/xrealradiant/libs/gtkutil/nonmodal.cpp',
'code/xrealradiant/libs/gtkutil/Timer.cpp',
'code/xrealradiant/libs/gtkutil/WindowPosition.cpp',
'code/xrealradiant/libs/gtkutil/idledraw.cpp',
'code/xrealradiant/libs/gtkutil/window/PersistentTransientWindow.cpp',
'code/xrealradiant/libs/gtkutil/dialog/Dialog.cpp',
'code/xrealradiant/libs/gtkutil/dialog/MessageBox.cpp',
'code/xrealradiant/libs/gtkutil/dialog_legacy.cpp',
'code/xrealradiant/libs/gtkutil/glfont.cpp',
'code/xrealradiant/libs/gtkutil/MenuItemAccelerator.cpp',
'code/xrealradiant/libs/gtkutil/cursor.cpp',
'code/xrealradiant/libs/gtkutil/DeferredAdjustment.cpp',
'code/xrealradiant/libs/gtkutil/menu/PopupMenu.cpp',
'code/xrealradiant/libs/gtkutil/widget.cpp',
'code/xrealradiant/libs/gtkutil/RegistryConnector.cpp',
'code/xrealradiant/libs/gtkutil/TreeModel.cpp',
'code/xrealradiant/libs/gtkutil/ModalProgressDialog.cpp',
'code/xrealradiant/libs/gtkutil/window.cpp',
'code/xrealradiant/libs/gtkutil/clipboard.cpp',
'code/xrealradiant/libs/gtkutil/FileChooser.cpp',
'code/xrealradiant/libs/gtkutil/pointer.cpp',
'code/xrealradiant/libs/gtkutil/SerialisableWidgets.cpp',
'code/xrealradiant/libs/gtkutil/ConsoleView.cpp',
'code/xrealradiant/libs/gtkutil/SourceView.cpp',
'code/xrealradiant/libs/gtkutil/PathEntry.cpp'
]

math_src = [
'code/xrealradiant/libs/math/matrix.cpp',
'code/xrealradiant/libs/math/line.cpp',
'code/xrealradiant/libs/math/pi.cpp',
'code/xrealradiant/libs/math/aabb.cpp',
'code/xrealradiant/libs/math/quaternion.cpp',
'code/xrealradiant/libs/math/curve.cpp',
'code/xrealradiant/libs/math/frustum.cpp'
]

xmlutil_src = [
'code/xrealradiant/libs/xmlutil/Document.cpp',
'code/xrealradiant/libs/xmlutil/Node.cpp',
]

archivezip_src = [
'code/xrealradiant/plugins/archivezip/plugin.cpp',
'code/xrealradiant/plugins/archivezip/ZipArchive.cpp',
'code/xrealradiant/plugins/archivezip/pkzip.cpp',
'code/xrealradiant/plugins/archivezip/zlibstream.cpp'
]

commandsystem_src = [
'code/xrealradiant/plugins/commandsystem/CommandSystem.cpp'
]

eclassmgr_src = [
'code/xrealradiant/plugins/eclassmgr/Doom3EntityClass.cpp',
'code/xrealradiant/plugins/eclassmgr/EClassManager.cpp',
'code/xrealradiant/plugins/eclassmgr/eclass_doom3.cpp'
]

eclasstree_src = [
'code/xrealradiant/plugins/eclasstree/plugin.cpp',
'code/xrealradiant/plugins/eclasstree/EClassTreeBuilder.cpp',
'code/xrealradiant/plugins/eclasstree/EClassTree.cpp'
]

entity_src = [
'code/xrealradiant/plugins/entity/origin.cpp',
'code/xrealradiant/plugins/entity/angle.cpp',
'code/xrealradiant/plugins/entity/ModelKey.cpp',
'code/xrealradiant/plugins/entity/rotation.cpp',
'code/xrealradiant/plugins/entity/light/Light.cpp',
'code/xrealradiant/plugins/entity/light/Renderables.cpp',
'code/xrealradiant/plugins/entity/light/LightNode.cpp',
'code/xrealradiant/plugins/entity/eclassmodel/EclassModel.cpp',
'code/xrealradiant/plugins/entity/eclassmodel/EclassModelNode.cpp',
'code/xrealradiant/plugins/entity/EntityCreator.cpp',
'code/xrealradiant/plugins/entity/EntitySettings.cpp',
'code/xrealradiant/plugins/entity/speaker/Speaker.cpp',
'code/xrealradiant/plugins/entity/speaker/SpeakerRenderables.cpp',
'code/xrealradiant/plugins/entity/speaker/SpeakerNode.cpp',
'code/xrealradiant/plugins/entity/Doom3Entity.cpp',
'code/xrealradiant/plugins/entity/EntityNode.cpp',
'code/xrealradiant/plugins/entity/doom3group/Doom3Group.cpp',
'code/xrealradiant/plugins/entity/doom3group/Doom3GroupNode.cpp',
'code/xrealradiant/plugins/entity/curve/CurveCatmullRom.cpp',
'code/xrealradiant/plugins/entity/curve/CurveNURBS.cpp',
'code/xrealradiant/plugins/entity/curve/Curve.cpp',
'code/xrealradiant/plugins/entity/curve/CurveEditInstance.cpp',
'code/xrealradiant/plugins/entity/plugin.cpp',
'code/xrealradiant/plugins/entity/generic/GenericEntity.cpp',
'code/xrealradiant/plugins/entity/generic/GenericEntityNode.cpp',
'code/xrealradiant/plugins/entity/NamespaceManager.cpp',
'code/xrealradiant/plugins/entity/KeyValueObserver.cpp',
'code/xrealradiant/plugins/entity/NameKeyObserver.cpp',
'code/xrealradiant/plugins/entity/colour.cpp',
'code/xrealradiant/plugins/entity/KeyValue.cpp',
'code/xrealradiant/plugins/entity/target/TargetKey.cpp',
'code/xrealradiant/plugins/entity/target/TargetableNode.cpp',
'code/xrealradiant/plugins/entity/target/TargetKeyCollection.cpp',
'code/xrealradiant/plugins/entity/target/TargetManager.cpp',
'code/xrealradiant/plugins/entity/target/RenderableTargetInstances.cpp'
]

entitylist_src = [
'code/xrealradiant/plugins/entitylist/EntityListModule.cpp',
'code/xrealradiant/plugins/entitylist/EntityList.cpp',
'code/xrealradiant/plugins/entitylist/GraphTreeModel.cpp'
]

eventmanager_src = [
'code/xrealradiant/plugins/eventmanager/Accelerator.cpp',
'code/xrealradiant/plugins/eventmanager/Command.cpp',
'code/xrealradiant/plugins/eventmanager/EventManager.cpp',
'code/xrealradiant/plugins/eventmanager/Modifiers.cpp',
'code/xrealradiant/plugins/eventmanager/MouseEvents.cpp',
'code/xrealradiant/plugins/eventmanager/Toggle.cpp',
'code/xrealradiant/plugins/eventmanager/WidgetToggle.cpp'
]

filetypes_src = [
'code/xrealradiant/plugins/filetypes/FileTypeRegistry.cpp'
]

filters_src = [
'code/xrealradiant/plugins/filters/XMLFilter.cpp',
'code/xrealradiant/plugins/filters/BasicFilterSystem.cpp',
'code/xrealradiant/plugins/filters/filters.cpp'
]

grid_src = [
'code/xrealradiant/plugins/grid/Grid.cpp'
]

image_src = [
'code/xrealradiant/libs/ddslib/ddslib.cpp',
'code/xrealradiant/plugins/image/bmp.cpp',
'code/xrealradiant/plugins/image/image.cpp',
'code/xrealradiant/plugins/image/pcx.cpp',
'code/xrealradiant/plugins/image/tga.cpp',
'code/xrealradiant/plugins/image/dds.cpp',
'code/xrealradiant/plugins/image/png.cpp',
'code/xrealradiant/plugins/image/jpeg.cpp',
'code/xrealradiant/plugins/image/ImageGDK.cpp'
]

mapdoom3_src = [
'code/xrealradiant/plugins/mapdoom3/Doom3MapFormat.cpp',
'code/xrealradiant/plugins/mapdoom3/NodeImporter.cpp',
'code/xrealradiant/plugins/mapdoom3/InfoFile.cpp',
'code/xrealradiant/plugins/mapdoom3/mapdoom3.cpp',
'code/xrealradiant/plugins/mapdoom3/NodeExporter.cpp'
]

md5model_src = [
'code/xrealradiant/plugins/md5model/MD5Model.cpp',
'code/xrealradiant/plugins/md5model/MD5ModelNode.cpp',
'code/xrealradiant/plugins/md5model/MD5Surface.cpp',
'code/xrealradiant/plugins/md5model/plugin.cpp',
'code/xrealradiant/plugins/md5model/MD5ModelLoader.cpp'
]

model_src = [
#'code/xrealradiant/libs/mathlib/mathlib.c',
#'code/xrealradiant/libs/mathlib/bbox.c',
#'code/xrealradiant/libs/mathlib/line.c',
#'code/xrealradiant/libs/mathlib/m4x4.c',
#'code/xrealradiant/libs/mathlib/ray.c',
'code/xrealradiant/libs/picomodel/picointernal.c',
'code/xrealradiant/libs/picomodel/picomodel.c',
'code/xrealradiant/libs/picomodel/picomodules.c',
'code/xrealradiant/libs/picomodel/pm_3ds.c',
'code/xrealradiant/libs/picomodel/pm_ase.c',
'code/xrealradiant/libs/picomodel/pm_md3.c',
'code/xrealradiant/libs/picomodel/pm_obj.c',
'code/xrealradiant/libs/picomodel/pm_ms3d.c',
'code/xrealradiant/libs/picomodel/pm_mdc.c',
'code/xrealradiant/libs/picomodel/pm_fm.c',
'code/xrealradiant/libs/picomodel/pm_md2.c',
'code/xrealradiant/libs/picomodel/pm_lwo.c',
'code/xrealradiant/libs/picomodel/pm_terrain.c',
'code/xrealradiant/libs/picomodel/lwo/clip.c',
'code/xrealradiant/libs/picomodel/lwo/envelope.c',
'code/xrealradiant/libs/picomodel/lwo/list.c',
'code/xrealradiant/libs/picomodel/lwo/lwio.c',
'code/xrealradiant/libs/picomodel/lwo/lwo2.c',
'code/xrealradiant/libs/picomodel/lwo/lwob.c',
'code/xrealradiant/libs/picomodel/lwo/pntspols.c',
'code/xrealradiant/libs/picomodel/lwo/surface.c',
'code/xrealradiant/libs/picomodel/lwo/vecmath.c',
'code/xrealradiant/libs/picomodel/lwo/vmap.c',
'code/xrealradiant/plugins/model/plugin.cpp',
'code/xrealradiant/plugins/model/PicoModelNode.cpp',
'code/xrealradiant/plugins/model/RenderablePicoModel.cpp',
'code/xrealradiant/plugins/model/PicoModelLoader.cpp',
'code/xrealradiant/plugins/model/RenderablePicoSurface.cpp'
]

particles_src = [
'code/xrealradiant/plugins/particles/ParticlesManager.cpp',
'code/xrealradiant/plugins/particles/particles.cpp'
]

scenegraph_src = [
'code/xrealradiant/plugins/scenegraph/SceneGraph.cpp',
'code/xrealradiant/plugins/scenegraph/Octree.cpp'
]

shaders_src = [
'code/xrealradiant/plugins/shaders/textures/TextureManipulator.cpp',
'code/xrealradiant/plugins/shaders/textures/ImageFileLoader.cpp',
'code/xrealradiant/plugins/shaders/textures/ImageLoaderManager.cpp',
'code/xrealradiant/plugins/shaders/textures/GLTextureManager.cpp',
'code/xrealradiant/plugins/shaders/CameraCubeMapDecl.cpp',
'code/xrealradiant/plugins/shaders/CShader.cpp',
'code/xrealradiant/plugins/shaders/Doom3ShaderLayer.cpp',
'code/xrealradiant/plugins/shaders/Doom3ShaderSystem.cpp',
'code/xrealradiant/plugins/shaders/MapExpression.cpp',
'code/xrealradiant/plugins/shaders/ShaderFileLoader.cpp',
'code/xrealradiant/plugins/shaders/ShaderLibrary.cpp',
'code/xrealradiant/plugins/shaders/ShaderTemplate.cpp',
'code/xrealradiant/plugins/shaders/plugin.cpp'
]

skins_src = [
'code/xrealradiant/plugins/skins/Doom3SkinCache.cpp',
'code/xrealradiant/plugins/skins/skincache.cpp'
]

sound_src = [
'code/xrealradiant/plugins/sound/SoundManager.cpp',
'code/xrealradiant/plugins/sound/sound.cpp',
'code/xrealradiant/plugins/sound/SoundPlayer.cpp'
]

uimanager_src = [
'code/xrealradiant/plugins/uimanager/DialogManager.cpp',
'code/xrealradiant/plugins/uimanager/MenuItem.cpp',
'code/xrealradiant/plugins/uimanager/GroupDialog.cpp',
'code/xrealradiant/plugins/uimanager/colourscheme/ColourScheme.cpp',
'code/xrealradiant/plugins/uimanager/colourscheme/ColourSchemeEditor.cpp',
'code/xrealradiant/plugins/uimanager/colourscheme/ColourSchemeManager.cpp',
'code/xrealradiant/plugins/uimanager/StatusBarManager.cpp',
'code/xrealradiant/plugins/uimanager/ToolbarManager.cpp',
'code/xrealradiant/plugins/uimanager/UIManager.cpp',
'code/xrealradiant/plugins/uimanager/MenuManager.cpp'
]

undo_src = [
'code/xrealradiant/plugins/undo/UndoSystem.cpp'
]

wavefront_src = [
'code/xrealradiant/plugins/wavefront/plugin.cpp',
'code/xrealradiant/plugins/wavefront/WaveFrontModule.cpp',
'code/xrealradiant/plugins/wavefront/WaveFrontExporter.cpp'
]

vfsq3_src = [
'code/xrealradiant/plugins/vfspk3/vfspk3.cpp',
'code/xrealradiant/plugins/vfspk3/Doom3FileSystem.cpp',
'code/xrealradiant/plugins/vfspk3/DirectoryArchive.cpp'
]

xmlregistry_src = [
'code/xrealradiant/plugins/xmlregistry/RegistryTree.cpp',
'code/xrealradiant/plugins/xmlregistry/XMLRegistry.cpp',
'code/xrealradiant/plugins/xmlregistry/XMLRegistryModule.cpp'
]


xrealradiant_env = env.Clone()
#xrealradiant_env.Append(CCFLAGS='-W -Wall -Wcast-align -Wcast-qual -Wno-unused-parameter -Wno-non-virtual-dtor -Wreorder')
xrealradiant_env.Append(CCFLAGS='-Icode/xrealradiant/radiant')
xrealradiant_env.Append(CCFLAGS='-Icode/xrealradiant/include')
xrealradiant_env.Append(CCFLAGS='-Icode/xrealradiant/libs')
xrealradiant_env.Append(LIBS=['GLEW'])
xrealradiant_env.Append(LIBS=['boost_filesystem'])
xrealradiant_env.Append(LIBS=['boost_regex'])
xrealradiant_env.ParseConfig('pkg-config gtksourceview-2.0 --cflags --libs')
xrealradiant_env.Append(LIBPATH=['.'])
xrealradiant_env.Append(CCFLAGS='-DRADIANT_USE_GLSL')

module_env = env.Clone()
#module_env.Append(CXXFLAGS='-Wno-non-virtual-dtor -fno-exceptions -fno-rtti')
module_env.Append(CCFLAGS='-Icode/xrealradiant/include')
module_env.Append(CCFLAGS='-Icode/xrealradiant/libs')

if env['arch'] == 'freebsd-i386':
	module_env.Append(CCFLAGS='-I/usr/local/include -L/usr/local/lib/gcc44 -Wl,-rpath /usr/local/lib/gcc44')
	module_env.Append(LIBPATH=['/usr/local/lib'])
	module_env.Append(LDFLAGS='-L/usr/local/lib/gcc44 -Wl,-rpath /usr/local/lib/gcc44')
	xrealradiant_env.Append(CCFLAGS='-I/usr/local/include -L/usr/local/lib/gcc44 -Wl,-rpath /usr/local/lib/gcc44')
	xrealradiant_env.Append(LIBPATH=['/usr/local/lib'])
	xrealradiant_env.Append(LDFLAGS='-L/usr/local/lib/gcc44 -Wl,-rpath /usr/local/lib/gcc44')

if env['arch'] == 'freebsd-amd64':
	module_env.Append(CCFLAGS='-I/usr/local/include -L/usr/local/lib/gcc44 -Wl,-rpath /usr/local/lib/gcc44')
	module_env.Append(LIBPATH=['/usr/local/lib'])
	module_env.Append(LDFLAGS='-L/usr/local/lib/gcc44 -Wl,-rpath /usr/local/lib/gcc44')
	xrealradiant_env.Append(CCFLAGS='-I/usr/local/include -L/usr/local/lib/gcc44 -Wl,-rpath /usr/local/lib/gcc44')
	xrealradiant_env.Append(LIBPATH=['/usr/local/lib'])
	xrealradiant_env.Append(LDFLAGS='-L/usr/local/lib/gcc44 -Wl,-rpath /usr/local/lib/gcc44')

if env['arch'] == 'linux-i386' or env['arch'] == 'linux-x86_64' or env['arch'] == 'freebsd-i386' or env['arch'] == 'freebsd-amd64':

	module_env.Append(CCFLAGS='-DPOSIX -fPIC')
	module_env.Append(LIBPATH=['.'])
	
	scenegraphutil_env = module_env.Clone()
	scenegraphutil_env.StaticLibrary('scenegraphutil', scenegraphutil_src)
	
	gtkutil_env = module_env.Clone()
	gtkutil_env.ParseConfig('pkg-config gtk+-2.0 --cflags --libs')
	gtkutil_env.ParseConfig('pkg-config gtkglext-1.0 --cflags --libs')
	gtkutil_env.ParseConfig('pkg-config gtksourceview-2.0 --cflags --libs')
	gtkutil_env.ParseConfig('pkg-config libxml-2.0 --cflags --libs')
	gtkutil_env.StaticLibrary('gtkutil', gtkutil_src)
	
	xmlutil_env = module_env.Clone()
	xmlutil_env.ParseConfig('pkg-config libxml-2.0 --cflags --libs')
	xmlutil_env.StaticLibrary('xmlutil', xmlutil_src)
	
	math_env = module_env.Clone()
	math_env.StaticLibrary('math', math_src)
	
	

	xrealradiant_env.Append(CCFLAGS='-DPOSIX')
	xrealradiant_env.ParseConfig('pkg-config gtk+-2.0 --cflags --libs')
	xrealradiant_env.ParseConfig('pkg-config gtkglext-1.0 --cflags --libs')
	xrealradiant_env.ParseConfig('pkg-config libxml-2.0 --cflags --libs')
	
	xrealradiant_env.Append(LIBS=['scenegraphutil', 'gtkutil', 'xmlutil', 'math'])
	
	if env['arch'] == 'linux-i386' or env['arch'] == 'freebsd-i386':
		xrealradiant_env.Program('xrealradiant', xrealradiant_src)
		xrealradiant_env.InstallAs('#xrealradiant/xrealradiant.i386', 'xrealradiant')
	elif env['arch'] == 'linux-x86_64':
		xrealradiant_env.Program('xrealradiant', xrealradiant_src)
		xrealradiant_env.InstallAs('#xrealradiant/xrealradiant.x86_64', 'xrealradiant')

	if env['arch'] == 'freebsd-amd64':
		xrealradiant_env.Program('xrealradiant', xrealradiant_src)
		xrealradiant_env.InstallAs('#xrealradiant/xrealradiant.amd64', 'xrealradiant')
	
	archivezip_env = module_env.Clone()
	archivezip_env.SharedLibrary('archivezip', archivezip_src, LIBS=['z'])
	archivezip_env.InstallAs('#xrealradiant/modules/archivezip.so', 'libarchivezip.so')
	
	commandsystem_env = module_env.Clone()
	commandsystem_env.ParseConfig('pkg-config libxml-2.0 --cflags --libs')
	commandsystem_env.SharedLibrary('commandsystem', commandsystem_src)
	commandsystem_env.InstallAs('#xrealradiant/modules/commandsystem.so', 'libcommandsystem.so')
	
	eclassmgr_env = module_env.Clone()
	eclassmgr_env.ParseConfig('pkg-config libxml-2.0 --cflags --libs')
	eclassmgr_env.Append(LIBS=['math'])
	eclassmgr_env.SharedLibrary('eclassmgr', eclassmgr_src)
	eclassmgr_env.InstallAs('#xrealradiant/modules/eclassmgr.so', 'libeclassmgr.so')
	
	eclasstree_env = module_env.Clone()
	eclasstree_env.ParseConfig('pkg-config gtk+-2.0 --cflags --libs')
	eclasstree_env.ParseConfig('pkg-config gtkglext-1.0 --cflags --libs')
	eclasstree_env.ParseConfig('pkg-config libxml-2.0 --cflags --libs')
	eclasstree_env.SharedLibrary('eclasstree', eclasstree_src)
	eclasstree_env.InstallAs('#xrealradiant/plugins/eclasstree.so', 'libeclasstree.so')
	
	entity_env = module_env.Clone()
	entity_env.ParseConfig('pkg-config libxml-2.0 --cflags --libs')
	entity_env.Append(LIBS=['scenegraphutil', 'math'])
	entity_env.SharedLibrary('entity', entity_src)
	entity_env.InstallAs('#xrealradiant/modules/entity.so', 'libentity.so')
	
	entitylist_env = module_env.Clone()
	entitylist_env.ParseConfig('pkg-config gtk+-2.0 --cflags --libs')
	entitylist_env.ParseConfig('pkg-config gtkglext-1.0 --cflags --libs')
	entitylist_env.ParseConfig('pkg-config libxml-2.0 --cflags --libs')
	entitylist_env.Append(LIBS=['gtkutil', 'xmlutil'])
	entitylist_env.SharedLibrary('entitylist', entitylist_src)
	entitylist_env.InstallAs('#xrealradiant/modules/entitylist.so', 'libentitylist.so')
	
	eventmanager_env = module_env.Clone()
	eventmanager_env.ParseConfig('pkg-config gtk+-2.0 --cflags --libs')
	eventmanager_env.ParseConfig('pkg-config libxml-2.0 --cflags --libs')
	eventmanager_env.Append(LIBS=['xmlutil'])
	eventmanager_env.SharedLibrary('eventmanager', eventmanager_src)
	eventmanager_env.InstallAs('#xrealradiant/modules/eventmanager.so', 'libeventmanager.so')
	
	filetypes_env = module_env.Clone()
	filetypes_env.SharedLibrary('filetypes', filetypes_src)
	filetypes_env.InstallAs('#xrealradiant/modules/filetypes.so', 'libfiletypes.so')
	
	filters_env = module_env.Clone()
	filters_env.Append(LIBS=['boost_regex'])
	filters_env.ParseConfig('pkg-config libxml-2.0 --cflags --libs')
	filters_env.Append(LIBS=['xmlutil'])
	filters_env.SharedLibrary('filters', filters_src)
	filters_env.InstallAs('#xrealradiant/modules/filters.so', 'libfilters.so')
	
	grid_env = module_env.Clone()
	grid_env.ParseConfig('pkg-config libxml-2.0 --cflags --libs')
	grid_env.SharedLibrary('grid', grid_src)
	grid_env.InstallAs('#xrealradiant/modules/grid.so', 'libgrid.so')
	
	image_env = module_env.Clone()
	image_env.Append(LIBS=['jpeg'])
	image_env.ParseConfig('pkg-config libpng --cflags --libs')
	image_env.ParseConfig('pkg-config gtk+-2.0 --cflags --libs')
	image_env.SharedLibrary('image', image_src)
	image_env.InstallAs('#xrealradiant/modules/image.so', 'libimage.so')
	
	mapdoom3_env = module_env.Clone()
	mapdoom3_env.ParseConfig('pkg-config gtk+-2.0 --cflags --libs')
	mapdoom3_env.ParseConfig('pkg-config gtkglext-1.0 --cflags --libs')
	mapdoom3_env.ParseConfig('pkg-config libxml-2.0 --cflags --libs')
	mapdoom3_env.Append(LIBS=['gtkutil', 'xmlutil'])
	mapdoom3_env.SharedLibrary('mapdoom3', mapdoom3_src)
	mapdoom3_env.InstallAs('#xrealradiant/modules/mapdoom3.so', 'libmapdoom3.so')
	
	md5model_env = module_env.Clone()
	md5model_env.Append(LIBS=['GLEW', 'scenegraphutil', 'math'])
	md5model_env.SharedLibrary('md5model', md5model_src)
	md5model_env.InstallAs('#xrealradiant/modules/md5model.so', 'libmd5model.so')
	
	model_env = module_env.Clone()
	model_env.Append(LIBS=['scenegraphutil', 'math'])
	model_env.SharedLibrary('model', model_src)
	model_env.InstallAs('#xrealradiant/modules/model.so', 'libmodel.so')
	
	particles_env = module_env.Clone()
	particles_env.SharedLibrary('particles', particles_src)
	particles_env.InstallAs('#xrealradiant/modules/particles.so', 'libparticles.so')
	
	scenegraph_env = module_env.Clone()
	scenegraph_env.Append(LIBS=['scenegraphutil'])
	scenegraph_env.SharedLibrary('scenegraph', scenegraph_src)
	scenegraph_env.InstallAs('#xrealradiant/modules/scenegraph.so', 'libscenegraph.so')
	
	shaders_env = module_env.Clone()
	shaders_env.ParseConfig('pkg-config libxml-2.0 --cflags --libs')
	shaders_env.Append(LIBS=['xmlutil'])
	shaders_env.SharedLibrary('shaders', shaders_src)
	shaders_env.InstallAs('#xrealradiant/modules/shaders.so', 'libshaders.so')
	
	skins_env = module_env.Clone()
	skins_env.SharedLibrary('skins', skins_src)
	skins_env.InstallAs('#xrealradiant/modules/skins.so', 'libskins.so')
	
	sound_env = module_env.Clone()
	sound_env.Append(LIBS=['openal'])
	sound_env.ParseConfig('pkg-config gtk+-2.0 --cflags --libs')
	sound_env.ParseConfig('pkg-config gtkglext-1.0 --cflags --libs')
	sound_env.ParseConfig('pkg-config ogg vorbis vorbisfile --cflags --libs')
	sound_env.Append(LIBS=['scenegraphutil', 'gtkutil'])
	sound_env.SharedLibrary('sound', sound_src)
	sound_env.InstallAs('#xrealradiant/modules/sound.so', 'libsound.so')
	
	uimanager_env = module_env.Clone()
	uimanager_env.ParseConfig('pkg-config gtk+-2.0 --cflags --libs')
	uimanager_env.ParseConfig('pkg-config gtkglext-1.0 --cflags --libs')
	uimanager_env.ParseConfig('pkg-config libxml-2.0 --cflags --libs')
	uimanager_env.Append(LIBS=['gtkutil', 'xmlutil'])
	uimanager_env.SharedLibrary('uimanager', uimanager_src)
	uimanager_env.InstallAs('#xrealradiant/modules/uimanager.so', 'libuimanager.so')
	
	undo_env = module_env.Clone()
	undo_env.ParseConfig('pkg-config libxml-2.0 --cflags --libs')
	undo_env.SharedLibrary('undo', undo_src)
	undo_env.InstallAs('#xrealradiant/modules/undo.so', 'libundo.so')
	
	vawefront_env = module_env.Clone()
	vawefront_env.ParseConfig('pkg-config libxml-2.0 --cflags --libs')
	vawefront_env.SharedLibrary('wavefront', wavefront_src)
	vawefront_env.InstallAs('#xrealradiant/modules/wavefront.so', 'libwavefront.so')
	
	vfsq3_env = module_env.Clone()
	vfsq3_env.ParseConfig('pkg-config glib-2.0 --cflags --libs')
	vfsq3_env.ParseConfig('pkg-config libxml-2.0 --cflags --libs')
	vfsq3_env.SharedLibrary('vfsq3', vfsq3_src)
	vfsq3_env.InstallAs('#xrealradiant/modules/vfsq3.so', 'libvfsq3.so')
	
	xmlregistry_env = module_env.Clone()
	xmlregistry_env.ParseConfig('pkg-config glib-2.0 --cflags --libs')
	xmlregistry_env.ParseConfig('pkg-config libxml-2.0 --cflags --libs')
	xmlregistry_env.Append(LIBS=['xmlutil'])
	xmlregistry_env.SharedLibrary('xmlregistry', xmlregistry_src)
	xmlregistry_env.InstallAs('#xrealradiant/modules/xmlregistry.so', 'libxmlregistry.so')

