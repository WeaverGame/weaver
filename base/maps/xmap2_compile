#!/bin/bash
################################################################################
#                                                                              #
#  XMAP2 map compilation script.                                               #
#  By Evan 'Odin' Goers                                                        #
#                                                                              #
# To use this script, add your compilation options for each stage(bsp, vis,    #
# light) to your map's worldspawn entity. You can do this by adding a key      #
# called xmap_bspopts, xmap_visopts, or xmap_lightopts. An example is as       #
# follows:                                                                     #
#                                                                              #
#  "xmap_lightopts" "-fast -filter -bounce 2"                                  #
#                                                                              #
################################################################################

# Options
COMMAND=$1
MAPNAME=$2

# Portability Config
case `uname -s` in
	SunOS)
		# On Solaris, make sure we use GNU utils, and get number of cores differently
		CMD_GREP=ggrep
		CMD_SED=gsed
		THREADS=`psrinfo | wc -l`
		;;
	*)
		# Normal tools on Linux
		CMD_GREP=grep
		CMD_SED=sed
		THREADS=`$CMD_GREP processor /proc/cpuinfo | awk '{a++} END {print a}'`
		;;
esac

# fs_basepath is generally '../..' since xmap2_compile is in the base/maps/ dir.
FS_BASEPATH='../..'
# fs_game should be 'weaver'
FS_GAME='base'
# game should be 'xreal'
GAME='xreal'

# map_ convention used to prevent possible binary name collision
map_bsp() {
	if ! $COMPILE -meta -v -leaktest $BSPOPTS $MAP; then exit 1; fi
}

map_debugportals() {
	if ! $COMPILE -meta -v -debugportals -leaktest $MAP; then exit 1; fi
}

map_debugsurfaces() {
	if ! $COMPILE -meta -v -debugsurfaces -leaktest $MAP; then exit 1; fi
}

map_fastvis() {
	if ! $COMPILE -vis -v -threads $THREADS -saveprt -fast $VISOPTS $MAP; then exit 1; fi
}

map_vis() {
	if ! $COMPILE -vis -v -threads $THREADS -saveprt $VISOPTS $MAP; then exit 1; fi
}

map_light() {
	if ! $COMPILE -light -v -threads $THREADS $LIGHTOPTS $MAP; then exit 1; fi
}

map_scale() {
	if ! $COMPILE -v -scale "$@" $MAP; then exit 1; fi
}

map_package() {
	cd ..
	TOP_BASE=`pwd`

	DATE=`date +%Y%m%d`
	PK3NAME=map-$MAP_STRIPPED-$DATE.pk3

	if [ "x$MAP_SUBREPO" == "x" ]; then
		# Map is not in a subrepo (ie, base/maps/THEMAP.map)
		# only want the files specificly for this map, not our whole base dir
		zip $PK3NAME maps/$MAP_STRIPPED.bsp
		zip $PK3NAME maps/$MAP_STRIPPED.map
		zip $PK3NAME maps/$MAP_STRIPPED/*.hdr
		zip $PK3NAME maps/$MAP_STRIPPED/*.png
		zip $PK3NAME levelshot/$MAP_STRIPPED.png
		zip $PK3NAME scripts/$MAP_STRIPPED.arena
	else
		# Map is in a subrepo (ie, base/map-THEMAP.pk3dir/maps/THEMAP.map), we want the whole pk3dir in the pk3
		# cd to the base of the pk3dir so paths in the pk3 aren't under all this
		cd ./maps/$MAP_PATH../
		# add contents, exclude a few filetypes and the VCS data
		zip $TOP_BASE/$PK3NAME -r . -x \*.prt -x \*.srf -x \*.bat -x \*\.hg\/\* -x \*\.git\/\* -x \*\.svn\/\*
	fi

	# cd back to whence it came
	cd $TOP_BASE/maps/
}

map_readbspopts() {
	if [ -r $MAP ]; then
		#grab the bspopts from the map
		BSPOPTS=`$CMD_GREP -A 256 "^// entity 0$" $MAP | \
		$CMD_GREP xmap_bspopts | \
		head -n1 | \
		$CMD_SED -r 's/^"xmap_bspopts" "(.*)"$/\1/'`
		if [[ $BSPOPTS != "" ]]; then
			echo "BSPOPTS: $BSPOPTS"
		fi
	else
		echo "$MAP: no such map."
		exit 1
	fi
}

map_readvisopts() {
	if [ -r $MAP ]; then
		#grab the visopts from the map
		VISOPTS=`$CMD_GREP -A 256 "^// entity 0$" $MAP | \
		$CMD_GREP xmap_visopts | \
		head -n1 | \
		$CMD_SED -r 's/^"xmap_visopts" "(.*)"$/\1/'`
		if [[ $VISOPTS != "" ]]; then
			echo "VISOPTS: $VISOPTS"
		fi
	else
		echo "$MAP: no such map."
		exit 1
	fi
}

map_readlightopts() {
	if [ -r $MAP ]; then
		#grab the lightopts from the map
		LIGHTOPTS=`$CMD_GREP -A 256 "^// entity 0$" $MAP | \
		$CMD_GREP xmap_lightopts | \
		head -n1 | \
		$CMD_SED -r 's/^"xmap_lightopts" "(.*)"$/\1/'`
		if [[ $LIGHTOPTS != "" ]]; then
			echo "LIGHTOPTS: $LIGHTOPTS"
		else
			echo "Forcing '-fast -filter -lightmapsize 1024' as per map standards."
			echo "Add 'xmap_lightopts' in worldspawn to override."
			LIGHTOPTS="-fast -filter -lightmapsize 1024"
		fi
	else
		echo "$MAP: no such map."
		exit 1
	fi
}

map_defaultcommand() {
	echo "Usage: $0 [OPTION] [FILE]"
	echo "Try \`$0 -h' for more information."
}

map_help() {
	echo "Usage: $0 [OPTION] [FILE]"
	echo "Compile a map into a BSP file and perform other functions."
	echo "Example $0 -all arena1.map"
	echo "Compile options(only one may be used):"
	echo "  -bsp            Compile the map into a basic BSP."
	echo "  -vis            Calculate VIS for an existing BSP."
	echo "  -fastvis        Same as -vis, at the cost of accuracy."
	echo "  -light          Calculate light for an existing BSP."
	echo "  -pk3            Attempt to automatically package a map project."
	echo "  -all            Short for -bsp -vis -light."
	echo "  -h              This help message."
	echo ""
	echo "This compilation script was written by Evan 'Odin' Goers, with"
	echo "help and additions from DavidSev, and Robert 'Tr3B' Beckebans."
}

check_map() {
	# Locate .map and things
	MAP_STRIPPED=$MAPNAME
	MAP_PATH=""

	if [ -e $MAP_STRIPPED.map ]; then
		MAP_PATH="./"
		MAP_SUBREPO=""
	else
		for subrepo in `echo ../*.pk3dir`
		do
			TMP_PATH="$subrepo/maps/"
			echo "Searching subrepo $TMP_PATH"
			if [ -e "$TMP_PATH$MAP_STRIPPED.map" ]; then
				MAP_PATH="$TMP_PATH"
				MAP_SUBREPO="$subrepo"
				break 1;
			fi
		done
	fi

	if [ "x$MAP_PATH" == "x" ]; then
		echo "Could not find a .map file for $MAP_STRIPPED"
		exit 1
	fi

	MAP="$MAP_PATH$MAP_STRIPPED.map"
	echo "$MAP_STRIPPED.map found at $MAP"
}

check_compiler() {
	case `uname -m` in
		x86_64)
			COMPILER='../../bin/linux-x86_64/xmap2.x86_64'
			if [ ! -e $COMPILER ]; then
				# didn't find xmap2 binary, it might be compiled as "native" arch
				if [ -e "../../bin/linux-native" ]; then
					COMPILER='../../bin/linux-native/xmap2'
				fi
			fi
			;;
		i86pc)
			COMPILER='../../bin/solaris-x86/xmap2'
			;;
		i386|i486|i586|i686)
			COMPILER='../../bin/linux-x86/xmap2.i386'
			;;
		powerpc|powerpc64)
			COMPILER='../../bin/mac-wtf/xmap2.ppc' # FIXME
			;;
		*)
			echo "You are not running a supported platform for compiling XreaL maps. If you would like to compile XreaL maps on your platform, please visit http://www.xreal-project.net for contact information."
			exit 0
			;;
	esac

	if [ ! -f $COMPILER ]; then
		echo "`basename $COMPILER` not found!"
		echo "Did you build XreaL with scons xmap=1?"
		exit 1
	fi
	COMPILE="$COMPILER -fs_basepath $FS_BASEPATH -fs_game $FS_GAME -game $GAME"
}

case $COMMAND in
	-bsp)
		check_map;
		check_compiler;
		map_readbspopts;
		map_bsp $BSPOPTS;
		;;
		
	-debugportals)
		check_map;
		check_compiler;
		map_debugportals;
		;;
	
	-debugsurfaces)
		check_map;
		check_compiler;
		map_debugsurfaces;
		;;

	-fastvis)
		check_map;
		check_compiler;
		map_readvisopts;
		map_fastvis $VISOPTS;
		;;
		
	-vis)
		check_map;
		check_compiler;
		map_readvisopts;
		map_vis $VISOPTS;
		;;

	-light)
		check_map;
		check_compiler;
		map_readlightopts;
		map_light $LIGHTOPTS;
		;;
		
	-pk3)
		check_map;
		map_package $PACKAGEOTPS;
		;;

	-all)
		check_map;
		check_compiler;
		map_readbspopts;
		map_bsp $BSPOPTS;
		map_readvisopts;
		map_vis $VISOPTS;
		map_readlightopts;
		map_light $LIGHTOPTS;
		;;

	-allpk3)
		check_map;
		check_compiler;
		map_readbspopts;
		map_bsp $BSPOPTS;
		map_readvisopts;
		map_vis $VISOPTS;
		map_readlightopts;
		map_light $LIGHTOPTS;
		map_package $PACKAGEOTPS;
		;;

	-h)
		map_help;
		;;
	*)
		map_defaultcommand;
		;;
esac

