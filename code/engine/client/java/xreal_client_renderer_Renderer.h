/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class xreal_client_renderer_Renderer */

#ifndef _Included_xreal_client_renderer_Renderer
#define _Included_xreal_client_renderer_Renderer
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     xreal_client_renderer_Renderer
 * Method:    setColor
 * Signature: (FFFF)V
 */
JNIEXPORT void JNICALL Java_xreal_client_renderer_Renderer_setColor
  (JNIEnv *, jclass, jfloat, jfloat, jfloat, jfloat);

/*
 * Class:     xreal_client_renderer_Renderer
 * Method:    drawStretchPic
 * Signature: (FFFFFFFFI)V
 */
JNIEXPORT void JNICALL Java_xreal_client_renderer_Renderer_drawStretchPic
  (JNIEnv *, jclass, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jint);

/*
 * Class:     xreal_client_renderer_Renderer
 * Method:    registerFont
 * Signature: (Ljava/lang/String;I)Lxreal/client/renderer/Font;
 */
JNIEXPORT jobject JNICALL Java_xreal_client_renderer_Renderer_registerFont
  (JNIEnv *, jclass, jstring, jint);

/*
 * Class:     xreal_client_renderer_Renderer
 * Method:    registerMaterial
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_xreal_client_renderer_Renderer_registerMaterial
  (JNIEnv *, jclass, jstring);

/*
 * Class:     xreal_client_renderer_Renderer
 * Method:    registerMaterialNoMip
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_xreal_client_renderer_Renderer_registerMaterialNoMip
  (JNIEnv *, jclass, jstring);

/*
 * Class:     xreal_client_renderer_Renderer
 * Method:    registerMaterialLightAttenuation
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_xreal_client_renderer_Renderer_registerMaterialLightAttenuation
  (JNIEnv *, jclass, jstring);

/*
 * Class:     xreal_client_renderer_Renderer
 * Method:    registerModel
 * Signature: (Ljava/lang/String;Z)I
 */
JNIEXPORT jint JNICALL Java_xreal_client_renderer_Renderer_registerModel
  (JNIEnv *, jclass, jstring, jboolean);

/*
 * Class:     xreal_client_renderer_Renderer
 * Method:    registerAnimation
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_xreal_client_renderer_Renderer_registerAnimation
  (JNIEnv *, jclass, jstring);

/*
 * Class:     xreal_client_renderer_Renderer
 * Method:    registerSkin
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_xreal_client_renderer_Renderer_registerSkin
  (JNIEnv *, jclass, jstring);

/*
 * Class:     xreal_client_renderer_Renderer
 * Method:    loadWorldBsp
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_xreal_client_renderer_Renderer_loadWorldBsp
  (JNIEnv *, jclass, jstring);

/*
 * Class:     xreal_client_renderer_Renderer
 * Method:    clearScene
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_xreal_client_renderer_Renderer_clearScene
  (JNIEnv *, jclass);

/*
 * Class:     xreal_client_renderer_Renderer
 * Method:    addRefEntityToScene
 * Signature: (IIIFFFFFFFFFFFFFFIFFFIFIIIFFFFFFFFFIZ)V
 */
JNIEXPORT void JNICALL Java_xreal_client_renderer_Renderer_addRefEntityToScene
  (JNIEnv *, jclass, jint, jint, jint, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jint, jfloat, jfloat, jfloat, jint, jfloat, jint, jint, jint, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jint, jboolean);

/*
 * Class:     xreal_client_renderer_Renderer
 * Method:    setRefEntityBone
 * Signature: (ILjava/lang/String;IFFFFFFF)V
 */
JNIEXPORT void JNICALL Java_xreal_client_renderer_Renderer_setRefEntityBone
  (JNIEnv *, jclass, jint, jstring, jint, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);

/*
 * Class:     xreal_client_renderer_Renderer
 * Method:    setRefEntitySkeleton
 * Signature: (IIFFFFFFFFF)V
 */
JNIEXPORT void JNICALL Java_xreal_client_renderer_Renderer_setRefEntitySkeleton
  (JNIEnv *, jclass, jint, jint, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);

/*
 * Class:     xreal_client_renderer_Renderer
 * Method:    buildSkeleton
 * Signature: (IIIFZ)Lxreal/client/renderer/RefSkeleton;
 */
JNIEXPORT jobject JNICALL Java_xreal_client_renderer_Renderer_buildSkeleton
  (JNIEnv *, jclass, jint, jint, jint, jfloat, jboolean);

/*
 * Class:     xreal_client_renderer_Renderer
 * Method:    addPolygonToSceneBegin
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_xreal_client_renderer_Renderer_addPolygonToSceneBegin
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     xreal_client_renderer_Renderer
 * Method:    addPolygonVertexToScene
 * Signature: (FFFFFFFFF)V
 */
JNIEXPORT void JNICALL Java_xreal_client_renderer_Renderer_addPolygonVertexToScene
  (JNIEnv *, jclass, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);

/*
 * Class:     xreal_client_renderer_Renderer
 * Method:    addPolygonToSceneEnd
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_xreal_client_renderer_Renderer_addPolygonToSceneEnd
  (JNIEnv *, jclass);

/*
 * Class:     xreal_client_renderer_Renderer
 * Method:    renderScene
 * Signature: (IIIIFFFFFFFFFII)V
 */
JNIEXPORT void JNICALL Java_xreal_client_renderer_Renderer_renderScene
  (JNIEnv *, jclass, jint, jint, jint, jint, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jint, jint);

#ifdef __cplusplus
}
#endif
#endif
