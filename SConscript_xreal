import os, string, sys

Import('env')

xreal_env = env.Clone()

xreal_src = [
'code/client/cin_ogm.c',
'code/client/cl_avi.c',
'code/client/cl_cgame.c',
'code/client/cl_cin.c',
'code/client/cl_console.c',
'code/client/cl_curl.c',
'code/client/cl_input.c',
'code/client/cl_keys.c',
'code/client/cl_main.c',
'code/client/cl_net_chan.c',
'code/client/cl_parse.c',
'code/client/cl_scrn.c',
'code/client/cl_ui.c',
'code/qcommon/cm_load.c',
'code/qcommon/cm_patch.c',
'code/qcommon/cm_polylib.c',
'code/qcommon/cm_test.c',
'code/qcommon/cm_trace.c',
'code/qcommon/cm_trisoup.c',
'code/qcommon/cmd.c',
'code/qcommon/common.c',
'code/qcommon/cvar.c',
'code/qcommon/files.c',
'code/qcommon/huffman.c',
'code/qcommon/md4.c',
'code/qcommon/md5.c',
'code/qcommon/msg.c',
'code/qcommon/net_chan.c',
'code/qcommon/net_ip.c',
'code/qcommon/parse.c',
'code/qcommon/vm.c',
'code/qcommon/q_math.c',
'code/qcommon/q_shared.c',
'code/qcommon/unzip.c',
'code/client/snd_codec_ogg.c',
'code/client/snd_codec_wav.c',
'code/client/snd_codec.c',
'code/client/snd_dma.c',
'code/client/snd_main.c',
'code/client/snd_mem.c',
'code/client/snd_mix.c',
'code/client/snd_openal.c',
'code/client/qal.c',
'code/server/sv_bot.c',
'code/server/sv_ccmds.c',
'code/server/sv_client.c',
'code/server/sv_game.c',
'code/server/sv_init.c',
'code/server/sv_main.c',
'code/server/sv_net_chan.c',
'code/server/sv_snapshot.c',
'code/server/sv_world.c',
'code/zlib/adler32.c',
'code/zlib/compress.c',
'code/zlib/crc32.c',
'code/zlib/gzio.c',
'code/zlib/uncompr.c',
'code/zlib/deflate.c',
'code/zlib/trees.c',
'code/zlib/zutil.c',
'code/zlib/inflate.c',
'code/zlib/infback.c',
'code/zlib/inftrees.c',
'code/zlib/inffast.c',
'code/zlib/ioapi.c',
'code/ogg/src/bitwise.c',
'code/ogg/src/framing.c',
'code/vorbis/lib/mdct.c',
'code/vorbis/lib/smallft.c',
'code/vorbis/lib/block.c',
'code/vorbis/lib/envelope.c',
'code/vorbis/lib/window.c',
'code/vorbis/lib/lsp.c',
'code/vorbis/lib/lpc.c',
'code/vorbis/lib/analysis.c',
'code/vorbis/lib/synthesis.c',
'code/vorbis/lib/psy.c',
'code/vorbis/lib/info.c',
'code/vorbis/lib/floor1.c',
'code/vorbis/lib/floor0.c',
'code/vorbis/lib/res0.c',
'code/vorbis/lib/mapping0.c',
'code/vorbis/lib/registry.c',
'code/vorbis/lib/codebook.c',
'code/vorbis/lib/sharedbook.c',
'code/vorbis/lib/lookup.c',
'code/vorbis/lib/bitrate.c',
'code/vorbis/lib/vorbisfile.c',
'code/speex/bits.c',
'code/speex/buffer.c',
'code/speex/cb_search.c',
'code/speex/exc_10_16_table.c',
'code/speex/exc_10_32_table.c',
'code/speex/exc_20_32_table.c',
'code/speex/exc_5_256_table.c',
'code/speex/exc_5_64_table.c',
'code/speex/exc_8_128_table.c',
'code/speex/fftwrap.c',
'code/speex/filterbank.c',
'code/speex/filters.c',
'code/speex/gain_table.c',
'code/speex/gain_table_lbr.c',
'code/speex/hexc_10_32_table.c',
'code/speex/hexc_table.c',
'code/speex/high_lsp_tables.c',
'code/speex/jitter.c',
'code/speex/kiss_fft.c',
'code/speex/kiss_fftr.c',
'code/speex/lsp_tables_nb.c',
'code/speex/ltp.c',
'code/speex/mdf.c',
'code/speex/modes.c',
'code/speex/modes_wb.c',
'code/speex/nb_celp.c',
'code/speex/preprocess.c',
'code/speex/quant_lsp.c',
'code/speex/resample.c',
'code/speex/sb_celp.c',
'code/speex/smallft.c',
'code/speex/speex.c',
'code/speex/speex_callbacks.c',
'code/speex/speex_header.c',
'code/speex/speex_lpc.c',
'code/speex/speex_lsp.c',
'code/speex/speex_window.c',
'code/speex/stereo.c',
'code/speex/vbr.c',
'code/speex/vq.c',
'code/theora/lib/dec/apiwrapper.c',
'code/theora/lib/dec/bitpack.c',
'code/theora/lib/dec/decapiwrapper.c',
'code/theora/lib/dec/decinfo.c',
'code/theora/lib/dec/decode.c',
'code/theora/lib/dec/dequant.c',
'code/theora/lib/dec/fragment.c',
'code/theora/lib/dec/huffdec.c',
'code/theora/lib/dec/idct.c',
'code/theora/lib/dec/thinfo.c',
'code/theora/lib/dec/internal.c',
'code/theora/lib/dec/quant.c',
'code/theora/lib/dec/state.c',
]

theora_decoder_x86_32_src = [
'code/theora/lib/dec/x86/mmxidct.c',
'code/theora/lib/dec/x86/mmxfrag.c',
'code/theora/lib/dec/x86/mmxstate.c',
'code/theora/lib/dec/x86/x86state.c'
]

theora_decoder_x86_64_src = [
'code/theora/lib/dec/x86/mmxidct.c',
'code/theora/lib/dec/x86/mmxfrag.c',
'code/theora/lib/dec/x86/mmxstate.c',
'code/theora/lib/dec/x86/x86state.c'
]

unix_src = [
'code/sys/sys_main.c',
'code/sys/sys_unix.c',
'code/sys/con_log.c',
'code/sys/con_passive.c',
'code/sys/sdl_input.c',
'code/sys/sdl_snd.c'
]

win_src = [
'code/sys/sys_main.c',
'code/sys/sys_win32.c',
'code/sys/con_log.c',
'code/sys/con_passive.c',
'code/sys/con_win32.c',
'code/sys/sdl_gamma.c',
'code/sys/sdl_glimp.c',
'code/sys/sdl_input.c',
'code/sys/sdl_snd.c'
]

xreal_env.Append(CCFLAGS='-Icode/ogg/include')
xreal_env.Append(CCFLAGS='-Icode/vorbis/include')
xreal_env.Append(CCFLAGS='-Icode/zlib')
xreal_env.Append(CCFLAGS='-DSTANDALONE')
xreal_env.Append(CCFLAGS='-DUSE_CODEC_VORBIS')
xreal_env.Append(CCFLAGS='-DUSE_VOIP')
xreal_env.Append(CCFLAGS='-DFLOATING_POINT')
xreal_env.Append(CCFLAGS='-DUSE_ALLOCA')
xreal_env.Append(CCFLAGS='-Icode/speex/include')
xreal_env.Append(CCFLAGS='-DUSE_CIN_THEORA')
xreal_env.Append(CCFLAGS='-Icode/theora/include')

if env['optimize'] != '0':
	env.Append(CCFLAGS = '-fno-strict-aliasing -funroll-loops')

if env['curl'] == 'compile':
	xreal_env.Append(CCFLAGS='-DUSE_CURL')
	xreal_env.Append(LIBS=['curl'])
elif env['curl'] == 'dlopen':
	xreal_env.Append(CCFLAGS='-DUSE_CURL_DLOPEN')
	

#if env['openal'] == 1:
xreal_env.Append(CCFLAGS='-DUSE_OPENAL')
if env['arch'] != 'darwin-ppc' and env['arch'] != 'darwin-i386':
	xreal_env.Append(LIBS=['openal'])



if env['arch'] == 'linux-i386':
	xreal_env.ParseConfig('sdl-config --cflags --libs')
	xreal_env.Append(LIBS=['dl', 'm'])

	if env['smp'] == 1:
		xreal_env.Append(CCFLAGS='-DSMP')
		xreal_env.Append(LIBS=['pthread'])
		
	xreal_env.Program('xreal', [xreal_src, unix_src, theora_decoder_x86_32_src])	
	xreal_env.InstallAs('#xreal.i386', 'xreal')

elif env['arch'] == 'linux-x86_64':
	xreal_env.Append(CCFLAGS='-DC_ONLY')
	xreal_env.ParseConfig('sdl-config --cflags --libs')
	xreal_env.Append(LIBS=['dl', 'm'])
	
	if env['smp'] == 1:
		xreal_env.Append(CCFLAGS='-DSMP')
		xreal_env.Append(LIBS=['pthread'])
	
	xreal_env.Program('xreal', [xreal_src, unix_src, theora_decoder_x86_64_src])		
	xreal_env.InstallAs('#xreal.x86_64', 'xreal')

elif env['arch'] == 'freebsd-i386':
	xreal_env.ParseConfig('sdl-config --cflags --libs')
	xreal_env.Append(LIBS=['m'])

	if env['smp'] == 1:
		xreal_env.Append(CCFLAGS='-DSMP')
		xreal_env.Append(LIBS=['pthread'])
	
	xreal_env.Program('xreal', [xreal_src, unix_src, theora_decoder_x86_32_src])	
	xreal_env.InstallAs('#xreal.i386', 'xreal')

elif env['arch'] == 'opensolaris-i386':
	xreal_env.ParseConfig('sdl-config --cflags --libs')
	xreal_env.Append(LIBS=['m', 'socket', 'nsl'])

	if env['smp'] == 1:
		xreal_env.Append(CCFLAGS='-DSMP')
		xreal_env.Append(LIBS=['pthread'])
	
	xreal_env.Program('xreal', [xreal_src, unix_src, theora_decoder_x86_32_src])	
	xreal_env.InstallAs('#xreal.i386', 'xreal')

elif env['arch'] == 'darwin-ppc ' or env['arch'] == 'darwin-i386':
	xreal_env.ParseConfig('sdl-config --cflags --libs')
	xreal_env.Append(LIBS=['m'])
	xreal_env.Append(CCFLAGS='-DMACOS_X')
	
	# HACK: for now disable altivec because there are some compiling issues
	if env['arch'] == 'darwin-ppc':
		xreal_env.Append(CCFLAGS='-Didppc_altivec=0')

	xreal_env.ParseConfig('freetype-config --cflags --libs')
	xreal_env.Append(CCFLAGS='-DBUILD_FREETYPE')
	xreal_env.Append(LINKFLAGS= ['-framework', 'IOKit', '-framework', 'OpenAL', '-framework'])
	
	xreal_env.Program('xreal', [xreal_src, unix_src, theora_decoder_x86_32_src])
	if env['arch'] == 'darwin-ppc':
		xreal_env.InstallAs('#xreal.ppc', 'xreal')
	elif env['arch'] == 'darwin-i386':
		xreal_env.InstallAs('#xreal.i386', 'xreal')
		
